---
title: "Lab-3: Matrices and Lists"
subtitle: "Stat 133"
format: 
  html:
    toc: true
    number-sections: true
    theme: zephyr
embed-resources: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
```


::: {.callout-note icon=false}

## General Instructions

-   Use the template file `lab03-template.qmd` to answer the questions.

-   Rename this file as `lab03-first-last.qmd`, where `first` and `last`
    are your first and last names (e.g. `lab03-gaston-sanchez.qmd`).

-   Make sure the YAML header in your `qmd` files includes `embed-resources: true`

-   Submit both your qmd and HTML files to the corresponding assignment
    submission in bCourses.

-   Please note that if you submit the incorrect files you will receive no credit.

:::


-----


# Matrices

a)  Use `matrix()` to create a matrix `mat1` (see below) from the input vector `x = letters[1:15]`:

```         
# mat1
     [,1] [,2] [,3] [,4] [,5]
[1,] "a"  "d"  "g"  "j"  "m" 
[2,] "b"  "e"  "h"  "k"  "n" 
[3,] "c"  "f"  "i"  "l"  "o" 
```

```{r}
# your code
x = letters[1:15]
mat1 <- matrix(x, nrow = 3, ncol = 5)
mat1
```

<br>

b)  Use `matrix()` to create a matrix `mat2` (see below) from the input vector `y = month.abb`:

```         
# mat2
     [,1]  [,2]  [,3] 
[1,] "Jan" "Feb" "Mar"
[2,] "Apr" "May" "Jun"
[3,] "Jul" "Aug" "Sep"
[4,] "Oct" "Nov" "Dec"
```

```{r}
# your code
y = month.abb
mat2 <- matrix(y, nrow = 4, ncol = 3, byrow = TRUE)
mat2
```

<br>

c)  Use `matrix()`---and its recycling principle---to create a matrix `mat3` (see below) from the input vector `a = c(2, 4, 8)`:

```         
# mat3
     [,1] [,2] [,3]
[1,]    2    2    2
[2,]    4    4    4
[3,]    8    8    8
```

```{r}
# your code
a = c(2, 4, 8)
mat3 <- matrix(a, nrow = 3, ncol = 3)
mat3
```

<br>

d)  Use `matrix()`---and its recycling principle---to create a matrix `mat4` (see below) from the input vector `a = c(3, 6, 9)`:

```         
# mat4
     [,1] [,2] [,3]
[1,]    3    3    3
[2,]    6    6    6
[3,]    9    9    9
[4,]    3    3    3
[5,]    6    6    6
[6,]    9    9    9
```

```{r}
# your code
a = c(3, 6, 9)
mat4 <- matrix(a, nrow = 6, ncol = 3)
mat4
```

<br>

e)  Use `matrix()`---and its recycling principle---to create a matrix `mat4` (see below) from the input vector `a = c(7, 5, 3)`:

```         
# mat5
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    7    7    7    7    7    7
[2,]    5    5    5    5    5    5
[3,]    3    3    3    3    3    3
```

```{r}
# your code
a = c(7, 5, 3)
mat5 <- matrix(a, nrow = 3, ncol = 6)
mat5
```

<br>

f)  Create matrix `mat6` (see below) from first three rows of `mat2`, and last three rows of `mat4`. *Hint*: try creating the matrix using `rbind()`.

```         
# mat6
     [,1]  [,2]  [,3] 
[1,] "3"   "3"   "3"  
[2,] "6"   "6"   "6"  
[3,] "9"   "9"   "9"  
[4,] "Jan" "Feb" "Mar"
[5,] "Apr" "May" "Jun"
[6,] "Jul" "Aug" "Sep" 
```

```{r}
# your code
mat6 <- rbind(mat4[4:6, ], mat2[1:3, ])
mat6
```

<br>

g)  Look at the documentation of `diag()` and find out how to use it to extract the elements in the diagonal of `mat3` (see below)

```         
2  4  8
```

```{r}
# your code
diag(mat3)
```

<br>

h)  Use the `diag()` function to create an **identity matrix** of dimensions 4 rows and 4 columns (see below). BTW: An identity matrix is a matrix with the same number of rows and columns, has ones in the diagonal, and zeroes off-diagonal.

```         
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1
```

```{r}
# your code
diag(1, nrow = 4)
```

<br>

i)  With matrix `mat1`, use bracket notation to write commands in order to input a couple of missing values (see below)

```         
# missing values
     [,1] [,2] [,3] [,4] [,5]
[1,] "a"  "d"  "g"  "j"  NA  
[2,] "b"  "e"  NA   "k"  "n" 
[3,] NA   "f"  "i"  "l"  "o"
```

```{r}
# your code
mat1[3,1] = NA 
mat1[2,3] = NA
mat1[1,5] = NA
mat1
```

<br>

l)  See how to use the functions `rownames()` and `colnames()` to give names to the rows and the columns of matrix `mat1`. Choose any names you want, and display matrix `mat1`

```{r}
# your code
rownames(mat1) = c("Morning", "Afternoon", "Night") 
colnames(mat1) = c("Mon", "Tue", "Wen", "Thu", "Fri")
mat1
```


<br>


-----


# Use of Brackets with Matrices

Consider the following matrix `MAT`

```{r}
MAT = matrix(LETTERS[1:12], 4, 3)
MAT
```

Using your own words, explain the difference between the following commands:

-   `MAT[3, 3]`
Only one element in the third row and third column of the MAT matrix is output.
-   `MAT[3, ]`
Output all elements of the third row of the MAT matrix.
-   `MAT[ ,3]`
Output all elements of the third column of the MAT matrix.
-   `MAT[3]`
Treat the MAT matrix as a vector and output the third element.
-   `MAT[[3]]`
Treat the MAT matrix as a vector and output the third column element.

<br>


-----


# A Basic List

Consider the following list `ron`:

```{r echo = TRUE}
ron <- list(
  "name" = 'Ron Weasley',
  "age" = 18L,
  "weight" = 152,
  "pure_blood" = TRUE,
  "sport" = 'quidditch'
)
```


Write R commands---displaying the output---to answer the following questions:

a) What is the class of `ron`?

```{r}
# your code
typeof(ron)
```

<br>

b) How many elements are in `ron`?

```{r}
# your code
length(ron)
```

<br>

c) What is the data type of the element `age`?

```{r}
# your code
typeof(ron$age)
```

<br>

d) If you combine `ron$age`, `ron$weight`, and `ron$pure_blood` in a new vector, what is 
the data type of this vector?

```{r}
# your code
class(c(ron$age, ron$weight, ron$pure_blood))
```

<br>


-----


# Leia's List

Consider the following list `leia`

```{r}
leia <- list(
  "name" = c("first" = "Leia", "last" = "Organa"),
  "body" = c("height" = 150, "weight" = 49),
  "force" = TRUE,
  "home" = "Alderaan"
)
```


## Your Turn: Practice subsetting `leia`:

Write R commands for each of the following parts

a) Write a subsetting command to obtain this output:

```
$body
height weight 
   150     49 
```

```{r}
# your code
leia["body"]
```

<br>

b) Write a subsetting command to obtain this output:

```
height weight 
   150     49 
```

```{r}
# your code
leia$body
```

<br>

c) Write a subsetting command to obtain this output:

```
height 
   150
```

```{r}
# your code
leia$body[1]
```

<br>

d) Write a subsetting command to obtain this output:

```
weight height 
    49    150
```

```{r}
# your code
leia$body[c(2,1)]
```

<br>

e) Write a subsetting command to obtain this output:

```
"Organa"
```

```{r}
# your code
leia$name["last"]
```

<br>


-----


# Vector vs List

In your own words, explain what the key difference is between an R vector and an R list.


__Your Answer:__
R vectors are always one-dimensional and all elements are of the same type, R lists are not necessarily one-dimensional and can contain different types.


<br>

-----


# Subsetting

Consider the following list:

```{r}
list_example = list("letter"=c("A", "B", "C"), "value"=c(10, 50, 20))
list_example
```

<br>

(a) What is the difference between `list_example["letter"]` and `list_example[["letter"]]`? 
Explain.

__Your Answer:__ 
The single bracket will give us access to the `container` of the element `list_example["letter"]` but without `unboxing` its contents; Double brackets give us access to the content of the element `list_example[["letter"]]`.
<br>

(b) What does `list_example$letter[3]` return? Why?

__Your Answer:__ 
Returns `"C"` because it is the third element in the `letter"=c("A", "B", "C")` list.
<br>

(c) What does the command `list_example$value = NULL` do? Explain.

__Your Answer:__ 
list_example now will only contain `$letter`, no `$value` anymore since it is effectively removed
